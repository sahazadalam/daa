package a1;
import java.util.*;

public class Kruskal {
    static int[] parent;

    static int find(int i) {
        if (parent[i] != i)
            parent[i] = find(parent[i]);
        return parent[i];
    }

    static void union(int i, int j) {
        parent[find(i)] = find(j);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of vertices and edges: ");
        int V = sc.nextInt(), E = sc.nextInt();
        int[][] edges = new int[E][3];

        int maxVertex = 0;
        System.out.println("Enter src dest weight:");
        for (int i = 0; i < E; i++) {
            edges[i][0] = sc.nextInt();
            edges[i][1] = sc.nextInt();
            edges[i][2] = sc.nextInt();
            maxVertex = Math.max(maxVertex, Math.max(edges[i][0], edges[i][1]));
        }

        parent = new int[maxVertex + 1]; // Adjust parent size to handle largest vertex
        for (int i = 0; i <= maxVertex; i++) parent[i] = i;

        Arrays.sort(edges, Comparator.comparingInt(a -> a[2]));

        int cost = 0;
        System.out.println("Edges in MST:");
        for (int[] e : edges) {
            if (find(e[0]) != find(e[1])) {
                union(e[0], e[1]);
                cost += e[2];
                System.out.println(e[0] + " - " + e[1] + " : " + e[2]);
            }
        }

        System.out.println("Total cost of MST: " + cost);
        sc.close();
    }
}